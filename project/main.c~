#include <msp430.h>

#include "toy.h"



// Toy states

typedef enum { IDLE, SHOW_SEQ, USER_INPUT, WIN, LOSE } ToyState;

// Toy variables
volatile ToyState state = IDLE;
volatile int seq[16];
volatile int seq_len = 1;
volatile int user_idx = 0;
// Utility: delays
void delay_ms(unsigned int ms) {
  while (ms--) {
    __delay_cycles(1000); // Assuming 1 MHz DCO
  }
}

// Generate tone (simple square wave on P2.4)
void buzz(unsigned int freq, unsigned int dur) {
  unsigned int i, cycles = dur * 10;
  for (i = 0; i < cycles; i++) {
    P2OUT ^= BIT4;
    __delay_cycles(1000000 / (freq * 2));
  }
  P2OUT &= ~BIT4;
}

// Light and buzz for given button/LED
void show_step(int btn) {
  // LEDs on P1.0-3, buzzer on P2.4
  P1OUT = (P1OUT & 0xF0) | (1 << btn);
  buzz(400 + 200 * btn, 80);
  P1OUT &= 0xF0;
  delay_ms(80);
}

// Add random step to sequence
void add_to_seq() {
  seq[seq_len] = rand() % 4;
  seq_len++;
}

// Show sequence
void show_sequence() {
  int i;
  for (i = 0; i < seq_len; i++) {
    show_step(seq[i]);
    delay_ms(200);
  }
}

// Initialize hardware
void init() {
  WDTCTL = WDTPW | WDTHOLD;
  P1DIR |= 0x0F;      // P1.0-3 as outputs (LEDs)
  P2DIR |= BIT4;      // P2.4 as output (buzzer)
  P2DIR &= ~0x0F;     // P2.0-3 as inputs (buttons)
  P2REN |= 0x0F;      // Enable pull-up/down resistors
  P2OUT |= 0x0F;      // Pull-up
}
// Check button press
int get_btn() {
  unsigned char val = ~P2IN & 0x0F;
  if (val == 0) return -1;
  for (int i = 0; i < 4; i++)
    if (val & (1 << i)) return i;
  return -1;
}
// Assembly state transition function
extern void set_idle_state();

void main(void) {
  init();

  while (1) {
    switch (state) {
    case IDLE:
      // Wait for any button to start
      if (get_btn() >= 0) {
	seq[0] = rand() % 4;
	seq_len = 1;
	state = SHOW_SEQ;
      }
      break;
    case SHOW_SEQ:
      show_sequence();
      user_idx = 0;
      state = USER_INPUT;
      break;
    case USER_INPUT: {
      int btn = get_btn();
      if (btn >= 0) {
	show_step(btn);
	if (btn == seq[user_idx]) {
	  user_idx++;
	  if (user_idx == seq_len) {
	    if (seq_len == 15) {
	      state = WIN;
	    }
	    else {
	      add_to_seq();
	      state = SHOW_SEQ;
	    }
	  }
	}
	else{
	  state = Lose;
	}
	while(get_btn() >= 0);
      }
      break;
    }
    case WIN:
      for (int i = 0; i < 8; i++) {
	P1OUT ^= 0x0F;
	buzz(800, 40);
	delay_ms(80);
      }
      set_idle_state(); // Assembly transition to IDLE
      break;
    case LOSE:
      for (int i = 0; i < 4; i++) {
	P1OUT = 0x0F;
	buzz(200, 150);
	P1OUT = 0;
	delay_ms(100);
      }
      set_idle_state(); // Assembly transition to IDLE
      break;
    }
  }
}
